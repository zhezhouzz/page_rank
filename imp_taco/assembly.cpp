// Generated by the Tensor Algebra Compiler (tensor-compiler.org)
// taco "PageMapHat(i,j) = PageMap(i,j) + d(i,j)" -f=PageMap:ss:0,1 -f=d:dd:0,1 -f=PageMapHat:dd:0,1
// -t=PageMap:int32 -t=d:float -t=PageMapHat:float -write-source=prepare_kernel.c
// -write-compute=prepare_compute.c -write-assembly=prepare_assembly.c
#include "assembly.h"
#include "taco_c_header.h"

int assemble(taco_tensor_t* PageMapHat, taco_tensor_t* PageMap, taco_tensor_t* d) {
    int PageMapHat1_dimension = (int)(PageMapHat->dimensions[PageMapHat->mode_ordering[0]]);
    int PageMapHat2_dimension = (int)(PageMapHat->dimensions[PageMapHat->mode_ordering[1]]);
    float* restrict PageMapHat_vals = (float*)(PageMapHat->vals);
    int PageMapHat_vals_size = PageMapHat->vals_size;
    int* restrict PageMap1_pos = (int*)(PageMap->indices[0][0]);
    int* restrict PageMap1_coord = (int*)(PageMap->indices[0][1]);
    int* restrict PageMap2_pos = (int*)(PageMap->indices[1][0]);
    int* restrict PageMap2_coord = (int*)(PageMap->indices[1][1]);
    int d1_dimension = (int)(d->dimensions[d->mode_ordering[0]]);
    int d2_dimension = (int)(d->dimensions[d->mode_ordering[1]]);
    int32_t pPageMap1 = PageMap1_pos[0];
    int32_t PageMap1_end = PageMap1_pos[1];
    int32_t id = 0;
    int32_t d1_end = d1_dimension;
    while (pPageMap1 < PageMap1_end) {
        int32_t iPageMap = PageMap1_coord[pPageMap1];
        int32_t pd1 = id;
        int32_t pPageMapHat1 = id;
        if (iPageMap == id) {
            int32_t pPageMap2 = PageMap2_pos[pPageMap1];
            int32_t PageMap2_end = PageMap2_pos[(pPageMap1 + 1)];
            int32_t jd = 0;
            int32_t d2_end = d2_dimension;
            while (pPageMap2 < PageMap2_end) {
                int32_t jPageMap = PageMap2_coord[pPageMap2];
                int32_t pd2 = pd1 * d2_dimension + jd;
                int32_t pPageMapHat2 = pPageMapHat1 * PageMapHat2_dimension + jd;
                if (jPageMap == jd) {
                } else {
                }
                pPageMap2 += (int32_t)(jPageMap == jd);
                jd++;
            }
            while (jd < d2_end) {
                int32_t pd2 = pd1 * d2_dimension + jd;
                int32_t pPageMapHat2 = pPageMapHat1 * PageMapHat2_dimension + jd;
                jd++;
            }
        } else {
            for (int32_t jd = 0; jd < d2_dimension; jd++) {
                int32_t pd2 = pd1 * d2_dimension + jd;
                int32_t pPageMapHat2 = pPageMapHat1 * PageMapHat2_dimension + jd;
            }
        }
        pPageMap1 += (int32_t)(iPageMap == id);
        id++;
    }
    while (id < d1_end) {
        int32_t pd1 = id;
        int32_t pPageMapHat1 = id;
        for (int32_t jd = 0; jd < d2_dimension; jd++) {
            int32_t pd2 = pd1 * d2_dimension + jd;
            int32_t pPageMapHat2 = pPageMapHat1 * PageMapHat2_dimension + jd;
        }
        id++;
    }

    PageMapHat_vals = (float*)malloc(sizeof(float) * PageMapHat1_dimension * PageMapHat2_dimension);
    PageMapHat_vals_size = PageMapHat1_dimension * PageMapHat2_dimension;
    PageMapHat->vals = (uint8_t*)PageMapHat_vals;
    PageMapHat->vals_size = PageMapHat_vals_size;
    return 0;
}

int compute(taco_tensor_t* PageMapHat, taco_tensor_t* PageMap, taco_tensor_t* d) {
    int PageMapHat1_dimension = (int)(PageMapHat->dimensions[PageMapHat->mode_ordering[0]]);
    int PageMapHat2_dimension = (int)(PageMapHat->dimensions[PageMapHat->mode_ordering[1]]);
    float* restrict PageMapHat_vals = (float*)(PageMapHat->vals);
    int* restrict PageMap1_pos = (int*)(PageMap->indices[0][0]);
    int* restrict PageMap1_coord = (int*)(PageMap->indices[0][1]);
    int* restrict PageMap2_pos = (int*)(PageMap->indices[1][0]);
    int* restrict PageMap2_coord = (int*)(PageMap->indices[1][1]);
    int32_t* restrict PageMap_vals = (int32_t*)(PageMap->vals);
    int d1_dimension = (int)(d->dimensions[d->mode_ordering[0]]);
    int d2_dimension = (int)(d->dimensions[d->mode_ordering[1]]);
    float* restrict d_vals = (float*)(d->vals);
    for (int32_t pPageMapHat = 0; pPageMapHat < PageMapHat1_dimension * PageMapHat2_dimension;
         pPageMapHat++) {
        PageMapHat_vals[pPageMapHat] = 0;
    }
    int32_t pPageMap1 = PageMap1_pos[0];
    int32_t PageMap1_end = PageMap1_pos[1];
    int32_t id = 0;
    int32_t d1_end = d1_dimension;
    while (pPageMap1 < PageMap1_end) {
        int32_t iPageMap = PageMap1_coord[pPageMap1];
        int32_t pd1 = id;
        int32_t pPageMapHat1 = id;
        if (iPageMap == id) {
            int32_t pPageMap2 = PageMap2_pos[pPageMap1];
            int32_t PageMap2_end = PageMap2_pos[(pPageMap1 + 1)];
            int32_t jd = 0;
            int32_t d2_end = d2_dimension;
            while (pPageMap2 < PageMap2_end) {
                int32_t jPageMap = PageMap2_coord[pPageMap2];
                int32_t pd2 = pd1 * d2_dimension + jd;
                int32_t pPageMapHat2 = pPageMapHat1 * PageMapHat2_dimension + jd;
                if (jPageMap == jd) {
                    PageMapHat_vals[pPageMapHat2] = PageMap_vals[pPageMap2] + d_vals[pd2];
                } else {
                    PageMapHat_vals[pPageMapHat2] = d_vals[pd2];
                }
                pPageMap2 += (int32_t)(jPageMap == jd);
                jd++;
            }
            while (jd < d2_end) {
                int32_t pd2 = pd1 * d2_dimension + jd;
                int32_t pPageMapHat2 = pPageMapHat1 * PageMapHat2_dimension + jd;
                PageMapHat_vals[pPageMapHat2] = d_vals[pd2];
                jd++;
            }
        } else {
            for (int32_t jd = 0; jd < d2_dimension; jd++) {
                int32_t pd2 = pd1 * d2_dimension + jd;
                int32_t pPageMapHat2 = pPageMapHat1 * PageMapHat2_dimension + jd;
                PageMapHat_vals[pPageMapHat2] = d_vals[pd2];
            }
        }
        pPageMap1 += (int32_t)(iPageMap == id);
        id++;
    }
    while (id < d1_end) {
        int32_t pd1 = id;
        int32_t pPageMapHat1 = id;
        for (int32_t jd = 0; jd < d2_dimension; jd++) {
            int32_t pd2 = pd1 * d2_dimension + jd;
            int32_t pPageMapHat2 = pPageMapHat1 * PageMapHat2_dimension + jd;
            PageMapHat_vals[pPageMapHat2] = d_vals[pd2];
        }
        id++;
    }
    return 0;
}
